import type { Letter, Prettify } from '../utils/types.ts';
import { OptionConfig } from './option.ts';

/**
 * Infer option type: boolean or string or string[]
 */
export type InferOptionRawType<F extends string> =
  F extends `-${Letter}, --${string} <${string}>`
    ? undefined | string
    : F extends `-${Letter}, --${string} [...${string}]`
    ? string[]
    : F extends `-${Letter}, --${string} [${string}]`
    ? boolean | string
    : F extends `-${Letter}, --${string}`
    ? boolean
    : F extends `--${string} <${string}>`
    ? undefined | string
    : F extends `--${string} [...${string}]`
    ? string[]
    : F extends `--${string} [${string}]`
    ? boolean | string
    : F extends `--${string}`
    ? boolean
    : boolean | string | string[];

export type InferOptionType<
  F extends string,
  C extends OptionConfig<F>
> = C['default'] extends {}
  ? C['cast'] extends () => infer R
    ? R
    : C['default'] | NonNullable<InferOptionRawType<F>>
  : C['cast'] extends () => infer R
  ? R
  : InferOptionRawType<F>;

/**
 * Infer option raw name
 *
 * Examples:
 * + const t1: InferOptionRawName<'--option' | '--hello'> = 'hello'
 * + const t2: InferOptionRawName<'-r, --root'> = 'root'
 * + const t3: InferOptionRawName<'--page-index'> = 'page-index'
 */
export type InferOptionRawName<F extends string> =
  F extends `-${Letter}, --no-${infer R} <${string}>`
    ? R
    : F extends `-${Letter}, --no-${infer R} [${string}]`
    ? R
    : F extends `-${Letter}, --no-${infer R}`
    ? R
    : F extends `-${Letter}, --${infer R} <${string}>`
    ? R
    : F extends `-${Letter}, --${infer R} [${string}]`
    ? R
    : F extends `-${Letter}, --${infer R}`
    ? R
    : F extends `--no-${infer R} <${string}>`
    ? R
    : F extends `--no-${infer R} [${string}]`
    ? R
    : F extends `--${infer R} <${string}>`
    ? R
    : F extends `--${infer R} [${string}]`
    ? R
    : F extends `--${infer R}`
    ? R
    : string;

/**
 * Infer camel case option name
 */
export type InferOptionName<T extends string> =
  InferOptionRawName<T> extends `${infer P1}-${infer P2}-${infer P3}`
    ? `${P1}${Capitalize<P2>}${Capitalize<P3>}`
    : InferOptionRawName<T> extends `${infer P1}-${infer P2}`
    ? `${P1}${Capitalize<P2>}`
    : InferOptionRawName<T>;

/**
 * Infer option information
 */
export type InferOption<F extends string, C extends OptionConfig<F>> = {
  [k in InferOptionName<F>]: InferOptionType<F, C>;
};

export type Push<T extends any[], U, R> = [...T, U, R];

export type ActionFn<T extends any[], Option extends object = {}, R = any> = (
  ...arg: Push<T, Prettify<Option & { '--': string[] }>, {}>
) => R | Promise<R>;

/**
 * Max Dep: 5
 *
 * Generated by: npx tsx examples/genType.ts 5
 */
export type ExtractCommand<T extends string> =
  T extends `<${infer P1}> <${infer P2}> <${infer P3}> <${infer P4}> [...${infer P5}]`
    ? [string, string, string, string, string[]]
    : T extends `<${infer P1}> <${infer P2}> <${infer P3}> <${infer P4}> [${infer P5}]`
    ? [string, string, string, string, string | undefined]
    : T extends `<${infer P1}> <${infer P2}> <${infer P3}> <${infer P4}> <${infer P5}>`
    ? [string, string, string, string, string]
    : T extends `${infer P1} <${infer P2}> <${infer P3}> <${infer P4}> [...${infer P5}]`
    ? [string, string, string, string[]]
    : T extends `${infer P1} <${infer P2}> <${infer P3}> <${infer P4}> [${infer P5}]`
    ? [string, string, string, string | undefined]
    : T extends `${infer P1} <${infer P2}> <${infer P3}> <${infer P4}> <${infer P5}>`
    ? [string, string, string, string]
    : T extends `${infer P1} ${infer P2} <${infer P3}> <${infer P4}> [...${infer P5}]`
    ? [string, string, string[]]
    : T extends `${infer P1} ${infer P2} <${infer P3}> <${infer P4}> [${infer P5}]`
    ? [string, string, string | undefined]
    : T extends `${infer P1} ${infer P2} <${infer P3}> <${infer P4}> <${infer P5}>`
    ? [string, string, string]
    : T extends `${infer P1} ${infer P2} ${infer P3} <${infer P4}> [...${infer P5}]`
    ? [string, string[]]
    : T extends `${infer P1} ${infer P2} ${infer P3} <${infer P4}> [${infer P5}]`
    ? [string, string | undefined]
    : T extends `${infer P1} ${infer P2} ${infer P3} <${infer P4}> <${infer P5}>`
    ? [string, string]
    : T extends `<${infer P1}> <${infer P2}> <${infer P3}> [...${infer P4}]`
    ? [string, string, string, string[]]
    : T extends `<${infer P1}> <${infer P2}> <${infer P3}> [${infer P4}]`
    ? [string, string, string, string | undefined]
    : T extends `<${infer P1}> <${infer P2}> <${infer P3}> <${infer P4}>`
    ? [string, string, string, string]
    : T extends `${infer P1} <${infer P2}> <${infer P3}> [...${infer P4}]`
    ? [string, string, string[]]
    : T extends `${infer P1} <${infer P2}> <${infer P3}> [${infer P4}]`
    ? [string, string, string | undefined]
    : T extends `${infer P1} <${infer P2}> <${infer P3}> <${infer P4}>`
    ? [string, string, string]
    : T extends `${infer P1} ${infer P2} <${infer P3}> [...${infer P4}]`
    ? [string, string[]]
    : T extends `${infer P1} ${infer P2} <${infer P3}> [${infer P4}]`
    ? [string, string | undefined]
    : T extends `${infer P1} ${infer P2} <${infer P3}> <${infer P4}>`
    ? [string, string]
    : T extends `${infer P1} ${infer P2} ${infer P3} [...${infer P4}]`
    ? [string[]]
    : T extends `${infer P1} ${infer P2} ${infer P3} [${infer P4}]`
    ? [string | undefined]
    : T extends `${infer P1} ${infer P2} ${infer P3} <${infer P4}>`
    ? [string]
    : T extends `<${infer P1}> <${infer P2}> [...${infer P3}]`
    ? [string, string, string[]]
    : T extends `<${infer P1}> <${infer P2}> [${infer P3}]`
    ? [string, string, string | undefined]
    : T extends `<${infer P1}> <${infer P2}> <${infer P3}>`
    ? [string, string, string]
    : T extends `${infer P1} <${infer P2}> [...${infer P3}]`
    ? [string, string[]]
    : T extends `${infer P1} <${infer P2}> [${infer P3}]`
    ? [string, string | undefined]
    : T extends `${infer P1} <${infer P2}> <${infer P3}>`
    ? [string, string]
    : T extends `${infer P1} ${infer P2} [...${infer P3}]`
    ? [string[]]
    : T extends `${infer P1} ${infer P2} [${infer P3}]`
    ? [string | undefined]
    : T extends `${infer P1} ${infer P2} <${infer P3}>`
    ? [string]
    : T extends `${infer P1} ${infer P2} ${infer P3}`
    ? []
    : T extends `<${infer P1}> [...${infer P2}]`
    ? [string, string[]]
    : T extends `<${infer P1}> [${infer P2}]`
    ? [string, string | undefined]
    : T extends `<${infer P1}> <${infer P2}>`
    ? [string, string]
    : T extends `${infer P1} [...${infer P2}]`
    ? [string[]]
    : T extends `${infer P1} [${infer P2}]`
    ? [string | undefined]
    : T extends `${infer P1} <${infer P2}>`
    ? [string]
    : T extends `${infer P1} ${infer P2}`
    ? []
    : T extends `[...${infer P1}]`
    ? [string[]]
    : T extends `[${infer P1}]`
    ? [string | undefined]
    : T extends `<${infer P1}>`
    ? [string]
    : T extends `${infer P1}`
    ? []
    : T extends ``
    ? []
    : never;
